Харківський університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії




ЗВІТ 
до практичної роботи номер 1 з дисципліни 
"Аналіз та рефакторинг коду" 
на тему: "Правила оформлення програмного коду"




Виконала ст. гр. ПЗПІ-22-4
Атаманова Олександра Петрівна

Перевірив
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович









Харків 2024
МЕТА
Дослідити основні принципи написання коду, який є зрозумілим, ефективним та легким для підтримки, з акцентом на мову TypeScript. Також розвинути навички аналізу та рефакторингу для покращення загальної якості програмного забезпечення.

ВСТУП
TypeScript — це потужна мова програмування, яка розширює можливості JavaScript, додаючи статичну типізацію, розширену підтримку об’єктно-орієнтованих конструкцій і можливість застосування сучасних функцій JavaScript. Вона стала незамінним інструментом для розробників, які працюють над великими проєктами та вимагають надійного коду. Завдяки TypeScript програмісти отримують змогу ефективніше контролювати типи даних, уникати багатьох поширених помилок, а також працювати із зрозумілим і перевіреним кодом.
Популярність TypeScript швидко зростає завдяки її інтеграції в великі фреймворки, такі як Angular, і підтримці відомих платформ, як-от Deno. Оскільки TypeScript має суворі правила типізації та багатий функціонал для структуризації коду, дотримання стандартів написання коду є важливим аспектом для досягнення максимальної якості програмного забезпечення. Добре структурований код у TypeScript є більш передбачуваним, легшим для підтримки та розширення іншими членами команди, що мінімізує ризик помилок у великих проєктах.
Основні цілі правил оформлення коду — забезпечити чіткість, читабельність і зручність використання. Крім того, дотримання цих рекомендацій допомагає уникнути зайвих витрат часу на рефакторинг і пошук помилок. Правила, такі як принципи SOLID, DRY (Don't Repeat Yourself), KISS (Keep It Simple, Stupid) і YAGNI (You Aren't Gonna Need It), є універсальними та можуть бути застосовані у різних мовах програмування. TypeScript дозволяє реалізувати ці принципи завдяки своїй строгій структурі та можливостям типізації.
Однак стилістичні та архітектурні рішення також залежать від команди, яка працює над проєктом. Такі правила можуть бути адаптовані відповідно до конкретних потреб проєкту, типу бізнес-логіки, а також індивідуальних вимог клієнта. Розробникам варто не лише орієнтуватися на базові рекомендації, але й адаптувати їх залежно від конкретного випадку.
Варто зазначити, що наведені далі рекомендації не є вичерпними, і для поглибленого ознайомлення з практиками необхідно звернутися до додаткового ресурсу [1].



 
РЕКОМЕНДАЦІЇ ДЛЯ НАПИСАННЯ КОДУ
Рекомендація: Дотримуйтеся єдиного стилю іменування.
Опис: Послідовність у назвах змінних та функцій робить код більш зрозумілим для інших розробників і полегшує його читання. Це знижує ризик плутанини та появи помилок, що можуть виникнути через використання різних форматів іменування.
Приклад:
// поганий приклад
let myVariable;
let my_variable;

// гарний приклад
let myVariable;
let anotherVariable;

Рекомендація: Пишіть зрозумілі назви функцій і змінних.
Опис: Назви повинні чітко відображати призначення змінної чи функції, щоб не було потреби в зайвих коментарях. Зрозумілі назви спрощують читання коду.
Приклад:
// поганий приклад
function f(a: number, b: number): number {
    return a + b;
  }
  
  // гарний приклад
  function sum(a: number, b: number): number {
    return a + b;
  }

Рекомендація: Дотримуйтесь принципу DRY (Don't Repeat Yourself).
Опис: Уникайте дублювання коду, виділяючи спільні фрагменти в окремі функції. Це зменшує ймовірність помилок і полегшує підтримку.
Приклад:
// поганий приклад
let area1 = width1 * height1;
let area2 = width2 * height2;

// гарний приклад
function calculateArea(width: number, height: number): number {
  return width * height;
}

Рекомендація: Уникайте використання any.
Опис: Використання any може призвести до небезпечного коду. Краще вказувати конкретний тип, щоб підвищити надійність і передбачуваність.
Приклад:
// поганий приклад
let value: any;

// гарний приклад
let value: number;

Рекомендація: Використовуйте стрілкові функції для анонімних функцій.
Опис: Стрілкові функції роблять код компактнішим і зберігають контекст this, що може бути корисним у вкладених функціях.
Приклад:
// поганий приклад
[1, 2, 3].map(function (x) {
  return x * 2;
});

// гарний приклад
[1, 2, 3].map(x => x * 2);

Рекомендація: Декларуйте константи замість магічних чисел.
Опис: Константи надають контекст магічним числам, роблячи код зрозумілішим. Це дозволяє уникнути помилок при зміні значень.
Приклад:
// поганий приклад
let speed = 3.6;

// гарний приклад
const METERS_PER_SECOND = 3.6;
	
Рекомендація: Використовуйте async/await для роботи з асинхронними операціями.
Опис: Використання async/await робить код простішим для розуміння, зберігаючи послідовність дій.
Приклад:
// поганий приклад
fetchData().then(data => processData(data));

// гарний приклад
async function loadData() {
  const data = await fetchData();
  processData(data);
}

Рекомендація: Оголошуйте змінні ближче до їхнього використання.
Опис: Це підвищує читабельність та дозволяє уникнути неочікуваних помилок, коли змінні використовуються поза їхнім контекстом.
Приклад:
// поганий приклад
let result;
result = calculateValue();

// гарний приклад
const result = calculateValue();

Рекомендація: Завжди ініціалізуйте змінні.
Опис: Ініціалізація зменшує ризик помилок через неініціалізовані змінні й забезпечує стабільну роботу коду.
Приклад:
// поганий приклад
let count;
console.log(count); // може бути undefined

// гарний приклад
let count = 0;
console.log(count);

Рекомендація: Обмежуйте використання глобальних змінних.
Опис: Мінімізація глобальних змінних зменшує ймовірність конфліктів і полегшує налагодження.
Приклад:
// поганий приклад
var globalValue = 42;

// гарний приклад
function calculate() {
  let localValue = 42;
}

Рекомендація: Використовуйте шаблонні рядки замість конкатенації.
Опис: Шаблонні рядки (template literals) підвищують читабельність і роблять роботу зі строками простішою й зручнішою, особливо при вставці змінних.
Приклад:
// поганий приклад
let message = 'Hello, ' + name + '!';

// гарний приклад
let message = `Hello, ${name}!`;

Рекомендація: Уникайте використання довгих функцій.
Опис: Короткі функції легше читати, тестувати та налагоджувати. Розбивайте складні функції на менші, щоб полегшити їх розуміння.
Приклад:
// поганий приклад
function processData(data: any): void {
  // довгий код, що виконує кілька дій
}

// гарний приклад
function fetchData(data: any): void {
  // код для завантаження даних
}

function transformData(data: any): any {
  // код для обробки даних
}

Рекомендація: Використовуйте інтерфейси для опису типів об’єктів.
Опис: Інтерфейси роблять структуру об'єктів очевидною, дозволяючи уникнути помилок при передачі та обробці даних.
Приклад:
// поганий приклад
function displayUser(user: { name: string; age: number }) {
  console.log(user.name, user.age);
}

// гарний приклад
interface User {
  name: string;
  age: number;
}

function displayUser(user: User) {
  console.log(user.name, user.age);
}

Рекомендація: Додавайте коментарі до складних ділянок коду.
Опис: Коментарі допомагають розуміти складні або незвичні частини коду, особливо якщо логіка неочевидна.
Приклад:
// поганий приклад
function calculateArea(radius: number): number {
  return Math.PI * radius * radius;
}

// гарний приклад
// Calculates the area of a circle with a given radius
function calculateArea(radius: number): number {
  return Math.PI * radius * radius;
}

Рекомендація: Використовуйте let і const замість var.
Опис: let і const мають блочну область видимості, що знижує ймовірність помилок, пов’язаних з областю видимості змінних.
Приклад:
// поганий приклад
var count = 10;

// гарний приклад
let count = 10;

Рекомендація: Використовуйте null та undefined обережно.
Опис: Розрізнення null і undefined знижує ризик неочікуваних помилок та полегшує обробку значень, які відсутні.
Приклад:
// поганий приклад
let data: string | null;

// гарний приклад
let data: string | undefined;

Рекомендація: Уникайте надмірного використання коментарів.
Опис: Пишіть код так, щоб він був зрозумілий без зайвих коментарів. Використовуйте коментарі тільки для пояснення складної логіки.
Приклад:
// поганий приклад
let a = 10; // змінна для зберігання числа 10

// гарний приклад
let numberOfItems = 10;



Рекомендація: Валідуйте дані при введенні.
Опис: Перевірка вхідних даних допомагає уникнути помилок та знижує ризик виникнення неочікуваних поведінок.
Приклад:
function setAge(age: number) {
  if (age < 0) throw new Error("Age cannot be negative");
}

Рекомендація: Використовуйте enum для фіксованих наборів значень.
Опис: enum допомагає чітко визначити набір можливих значень і робить код більш структурованим.
Приклад:
// поганий приклад
const ADMIN = 1;
const USER = 2;

// гарний приклад
enum Role {
  Admin,
  User
}

Рекомендація: Завжди додавайте return у функціях, які повертають значення.
Опис: Чітке визначення значення, що повертається, робить функцію зрозумілішою та знижує ризик неочікуваних результатів.
Приклад:
// поганий приклад
function calculate(): number {
  // відсутній return
}

// гарний приклад
function calculate(): number {
  return 42;
}

Рекомендація: Уникайте вкладених тернарних операторів.
Опис: Вкладені тернарні оператори ускладнюють читання коду; використовуйте if-else конструкції для кращої зрозумілості.
Приклад:
// поганий приклад
let message = age < 18 ? "young" : age < 50 ? "adult" : "senior";

// гарний приклад
let message;
if (age < 18) message = "young";
else if (age < 50) message = "adult";
else message = "senior";

Рекомендація: Використовуйте деструктуризацію для об’єктів.
Опис: Деструктуризація підвищує читабельність коду, особливо при роботі з об'єктами з багатьма властивостями.
Приклад:
// поганий приклад
const name = person.name;
const age = person.age;

// гарний приклад
const { name, age } = person;

Рекомендація: Перевіряйте значення null і undefined.
Опис: Застосовуйте перевірки, щоб запобігти потенційним помилкам через відсутні значення, особливо при роботі з об’єктами, отриманими від зовнішніх джерел.
Приклад:
// поганий приклад
let length = data.length; // може викликати помилку, якщо data є null або undefined

// гарний приклад
let length = data ? data.length : 0;

ВИСНОВКИ
Підсумовуючи, можна зазначити, що дотримання правил оформлення коду в TypeScript суттєво впливає на якість програмного забезпечення, особливо у великих проектах. Використання типізації, узгоджених стилістичних прийомів, та структурованого підходу дозволяє значно зменшити кількість помилок, підвищити читабельність коду та полегшити його підтримку й масштабування. Чіткі правила допомагають уникнути багатьох труднощів, пов'язаних із неправильним використанням змінних або складними залежностями між функціями та компонентами.
Правила та рекомендації для TypeScript включають не лише універсальні принципи, як-от SOLID, DRY, і KISS, але й специфічні підходи для покращення роботи з цією мовою. Типізація, ясна структура коду, а також підтримка сучасних особливостей JavaScript допомагають розробникам створювати надійне й підтримуване програмне забезпечення.
Загалом, дотримання правил оформлення сприяє створенню коду, який відповідає високим стандартам розробки, а також є легким у навчанні для нових членів команди, що забезпечує успішну та ефективну роботу над проектами в довгостроковій перспективі.
 
ДОДАТОК А
1. Google TypeScript Style Guide. URL: https://google.github.io/styleguide/tsguide.html (date of access: 13.11.2024).
 
ДОДАТОК Б
Відео на YouTube

https://www.youtube.com/watch?v=ABKHKL3afY4 
ДОДАТОК В
Презентація
