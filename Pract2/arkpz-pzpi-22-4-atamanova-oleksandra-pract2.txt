Харківський університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії




ЗВІТ 
до практичної роботи номер 2 з дисципліни 
"Аналіз та рефакторинг коду" 
на тему: " Методи рефакторингу коду програмного забезпечення"




Виконала ст. гр. ПЗПІ-22-4
Атаманова Олександра Петрівна

Перевірив
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович









Харків 2024
МЕТА
Дослідити ключові методи рефакторингу коду, навчитися визначати недоліки у його структурі та використовувати обрані підходи для оптимізації, підвищення читабельності та спрощення підтримки.

ВСТУП
Рефакторинг — це систематичний процес удосконалення коду, який дозволяє зробити його більш зрозумілим і гнучким, без зміни функціональності. Завдяки рефакторингу програма стає простішою для розширення та обслуговування.
Рефакторинг доречний у таких ситуаціях:
•	Розширення функціоналу. Якщо додавання нових функцій ускладнюється незрозумілою структурою коду чи дублюванням, рефакторинг дозволить вирішити ці проблеми.
•	Виправлення помилок. Невдале проєктування коду часто спричиняє помилки. Рефакторинг допомагає усунути наявні баги та запобігти їх появі в майбутньому.
•	Підтримка коду. Навіть без нагальної потреби, регулярне вдосконалення коду допомагає уникати технічного боргу.
У цьому звіті розглянуто три методи рефакторингу:
•	Remove Assignments to Parameters.
•	Consolidate Duplicate Conditional Fragments.
•	Replace Method with Method Object.
 
МЕТОДИ РЕФАКТОРИНГУ КОДУ

1.	Remove Assignments to Parameters (Видалення присвоєння параметрам)
Метод усуває присвоєння значень параметрам шляхом створення локальної змінної для збереження змінних значень.

Опис проблеми: Присвоєння значень параметрам функцій або методів ускладнює читання та розуміння коду. Параметри зазвичай сприймаються як сталі, а їх зміна може вводити в оману розробників, що працюють із кодом. Це також створює ризик помилок, особливо якщо параметри змінюються у великому методі з кількома гілками логіки.

Кроки рефакторингу:
1.	Визначте, в яких місцях параметрам присвоюються нові значення.
2.	Створіть локальну змінну для збереження нового значення.
3.	 Замініть всі звернення до параметра на звернення до локальної змінної.
4.	 Протестуйте програму.

Приклад:
//поганий приклад
function calculateDiscount(price: number, discount: number): number {
    if (discount > 50) {
        discount = 50; // присвоєння параметру
    }
    return price - (price * (discount / 100));
}

//виправлений приклад
function calculateDiscount(price: number, discount: number): number {
    let adjustedDiscount = discount; // створення локальної змінної
    if (adjustedDiscount > 50) {
        adjustedDiscount = 50;
    }
    return price - (price * (adjustedDiscount / 100));
}

Переваги отриманого коду
•	Читабельність: Код легше зрозуміти, адже параметри залишаються незмінними.
•	Безпека: Мінімізовано ризик помилок, пов’язаних із неочікуваними змінами параметрів.
•	Структурованість: Логіка чітко розділена, і локальна змінна використовується тільки для обчислень.

2.	Consolidate Duplicate Conditional Fragments (Об’єднання повторюваних фрагментів умов)
Метод переносить повторювані дії за межі умовних конструкцій. Це скорочує дублювання коду та покращує його підтримуваність.

Опис проблеми: Повторювані фрагменти коду у різних гілках умов ускладнюють читання та підтримку. Зміни у такому коді вимагають редагування в кількох місцях, що збільшує ризик помилок і може зробити код складним для розширення.
Кроки рефакторингу:
1.	Виявити повторювані дії у різних умовах.
2.	Перенести повторюваний код поза межі умов.
3.	Переконатися, що логіка програми не зміниться.
4.	Протестувати програму.

Приклад:
//поганий приклад
function processOrder(order: Order): void {
    if (order.status === "new") {
        sendNotification(order);
        console.log("Order processed.");
    } else if (order.status === "pending") {
        sendNotification(order);
        console.log("Order processed.");
    }
}

//виправлений приклад
function processOrder(order: Order): void {
    if (order.status === "new" || order.status === "pending") {
        sendNotification(order);
        console.log("Order processed.");
    }
}

Переваги отриманого коду:
•	Читабельність: Код став коротшим і зрозумілішим.
•	Легкість підтримки: Зміни потрібно вносити лише в одному місці.
•	Зменшення дублікатів: Логіка виконання винесена за межі умов.

3.	Replace Method with Method Object (Заміна методу об'єктом методу)
Метод пропонує винести логіку методу в окремий клас. Це дозволяє зберігати стан у вигляді властивостей класу та організувати логіку більш зрозуміло.

Опис проблеми: Довгі методи із численними локальними змінними та складною логікою стають важкими для розуміння, тестування та підтримки. Це також може спричиняти проблеми при внесенні змін або розширенні функціональності.
Кроки рефакторингу:
1.	Створіть новий клас, у якому збережіть початкові дані методу.
2.	Перемістіть логіку методу у метод цього класу.
3.	Замініть виклик методу у вихідному коді на створення об’єкта та виклик нового методу.
4.	Перевірте, що функціональність не змінилася.

Приклад:
//поганий приклад
function analyzeData(data: number[]): { total: number; average: number } {
    let total = 0;
    for (const value of data) {
        total += value;
    }
    const average = total / data.length;
    return { total, average };
}

//виправлений приклад
class DataAnalyzer {
    data: number[];

    constructor(data: number[]) {
        this.data = data;
    }

    analyze(): { total: number; average: number } {
        const total = this.data.reduce((sum, value) => sum + value, 0);
        const average = total / this.data.length;
        return { total, average };
    }
}

// Використання:
const analyzer = new DataAnalyzer([10, 20, 30]);
console.log(analyzer.analyze());



Переваги отриманого коду:
•	Модульність: Логіка винесена в окремий клас, що полегшує тестування.
•	Читабельність: Код став менш завантаженим і легше читається.
•	Гнучкість: Легко додавати нову функціональність або модифікувати існуючу.

 
ІНСТРУМЕНТИ РЕФАКТОРИНГУ
1. Інтегровані засоби рефакторингу в IDE
Сучасні інтегровані середовища розробки (IDE) пропонують широкий набір інструментів для автоматизації рефакторингу коду.
•	Visual Studio Code (JavaScript, TypeScript, Python тощо):
o	Rename: перейменування змінних, функцій, або класів.
o	Extract Method/Variable: виділення повторюваного коду в окремий метод або змінну.
o	Move Symbol: переміщення функцій, класів або інших елементів у нові файли.
o	Code Action: автоматичне застосування запропонованих виправлень або рефакторингу.
•	WebStorm (TypeScript, JavaScript, HTML, CSS):
o	Safe Delete: безпечне видалення змінних, методів, або класів.
o	Change Signature: зміна структури методу, додавання або видалення параметрів.
o	Inline Variable/Method: заміна викликів змінних або методів їх значенням безпосередньо в коді.
•	PyCharm (Python):
o	Extract Method/Class: створення нових методів або класів із існуючого коду.
o	Encapsulate Field: створення геттерів і сеттерів для приватних полів.
o	Optimize Imports: видалення зайвих або невикористовуваних імпортів.




2. Статичні аналізатори коду з функціями рефакторингу
Такі інструменти аналізують код і автоматично пропонують оптимізації та виправлення.
•	ESLint (JavaScript, TypeScript):
Виявляє помилки, дублювання, порушення стилю коду і пропонує рефакторинг. Інтегрується у більшість CI/CD процесів.
•	SonarLint:
Доступний для Java, Python, C#, TypeScript тощо. Виконує аналіз коду у реальному часі, пропонує виправлення дублювання та зменшення складності.
•	ReSharper (для Visual Studio):
Пропонує покращення для коду .NET і JavaScript, включаючи автоматизацію методів рефакторингу, як-от Extract Method, Introduce Variable, Remove Unused Code.

3. Окремі інструменти для конкретних мов
•	Prettier (TypeScript, JavaScript, HTML):
Автоматично форматує код, забезпечуючи єдиний стиль у всьому проекті.
•	Clang-Tidy (C++):
Інструмент статичного аналізу, який знаходить потенційні помилки і пропонує автоматичні виправлення.
•	Black (Python):
Автоматизує форматування Python-коду відповідно до загальноприйнятих стандартів.
Використання цих інструментів значно прискорює рефакторинг, підвищує якість коду і зменшує кількість помилок, що виникають у процесі підтримки та розвитку програмного забезпечення.

 
ВИСНОВКИ

Рефакторинг коду — це важливий етап у процесі розробки програмного забезпечення, що сприяє його довговічності та стабільності. На основі проведеної роботи можна зробити такі висновки:
Покращення читабельності та підтримки коду:
Застосування методів рефакторингу, таких як "Remove Assignments to Parameters", "Consolidate Duplicate Conditional Fragments" та "Replace Method with Method Object", допомагає усунути дублювання, спростити умовну логіку та структурувати код. Це забезпечує його зрозумілість і легкість для подальшого розвитку.
Оптимізація структури проекту:
Регулярний рефакторинг дозволяє усувати технічний борг, що значно підвищує стабільність системи, спрощує впровадження нових функцій та виправлення багів.
Підвищення продуктивності команди:
Якісний код сприяє швидшому розумінню проекту новими членами команди та зменшує час, необхідний для внесення змін.
Ефективне використання інструментів:
Використання інтегрованих засобів рефакторингу в IDE, таких як Visual Studio Code, WebStorm або PyCharm, а також статичних аналізаторів коду, таких як ESLint чи SonarLint, значно полегшує процес рефакторингу та забезпечує високу якість результату.
Рекомендації:
1.	Виконувати рефакторинг поступово, зберігаючи функціональність коду за допомогою тестування на кожному етапі.
2.	Регулярно проводити аналіз коду, щоб запобігти накопиченню технічного боргу.
3.	Використовувати сучасні інструменти, які автоматизують процеси рефакторингу та зменшують ризик виникнення помилок.
Таким чином, рефакторинг є не лише засобом оптимізації коду, але й запорукою ефективної розробки, яка відповідає вимогам сучасних стандартів якості програмного забезпечення.
 
ДОДАТОК А
Список використаних джерел

1. Martin Fowler. Refactoring. Improving the Design of Existing Code– Addison-Wesley Professional, 1999. – 464 p.
 
ДОДАТОК Б
Відео на YouTube

https://www.youtube.com/watch?v=uF32eJv6MpE
 
ДОДАТОК В
Презентація
