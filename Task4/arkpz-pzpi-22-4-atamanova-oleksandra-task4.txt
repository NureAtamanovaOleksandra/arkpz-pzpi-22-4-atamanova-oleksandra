Харківський університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії






ЗВІТ
до лабораторної роботи номер 4 з дисципліни
"Аналіз та рефакторинг коду"
на тему: "РОЗРОБКА IoT КЛІЄНТА"




Виконала ст. гр. ПЗПІ-22-4
Атаманова Олександра Петрівна

Перевірив
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович
 





Харків 2024

1 МЕТА

Мета роботи полягає у розробці програмного забезпечення для IoT або SmartDevice пристрою, побудованого на основі сучасної популярної платформи, що підходить для реалізації вбудованих систем (Embedded Systems), з метою створення програмної системи управління та автоматизації дистанційних замовлень у магазині світлодіодної продукції.

2 ХІД РОБОТИ

У ході виконання лабораторної роботи було розроблено програмне забезпечення для IoT-пристрою, що інтегруються в програмну систему управління та автоматизації дистанційних замовлень у магазині світлодіодної продукції (див. Додаток В).
Опис інженерних рішень:
•	Пристрій індикації статусу замовлення:
•	Мікроконтролер ESP32;
•	RGB світлодіод для відображення різних статусів;
•	Резистори для обмеження струму світлодіода;
•	Підключення до серверу через ngrok для отримання даних в реальному часі.
Функціональні можливості пристрою:
1.	Відображення статусу замовлення через кольори RGB світлодіода: 
•	Червоний - замовлення відхилено (rejected);
•	Зелений - замовлення прийнято (accepted);
•	Синій - замовлення обробляється (processing);
•	Жовтий - замовлення готується (preparing);
•	Білий - замовлення готове (ready).

2.	Математична обробка даних та відображення статистики:
•	Розрахунок відсотку успішності виконання замовлень.
•	Візуалізація ефективності роботи системи:
o	Зелений (>80% успішних замовлень);
o	Жовтий (50-80% успішних замовлень);
o	Червоний (<50% успішних замовлень).
Технічні характеристики:
•	Зв'язок з сервером через HTTP/HTTPS протокол;
•	Періодичне опитування сервера кожні 5 секунд;
•	Автоматичне підключення до WiFi мережі;
•	Вивід діагностичної інформації через Serial Monitor.
Середовище розробки та емуляції:
•	Платформа Wokwi (https://wokwi.com);
•	Тунелювання локального серверу через ngrok;
•	Мова програмування: C++ (Arduino);
•	Комунікація з бекендом: REST API.
Перед розробкою програмного коду IoT пристрою було створено UML діаграми прецедентів та діяльності для візуалізації його роботи (див. Додатки А-Б).
Бізнес логіка IoT пристрою включає:
•	Отримання статусів замовлень з серверу;
•	Відображення цих статусів через RGB світлодіод різними кольорами;
•	Математичну обробку даних для розрахунку статистики успішності замовлень.
Налаштування IoT пристрою передбачає:
•	Конфігурацію WiFi з'єднання;
•	Налаштування зв'язку з сервером через ngrok;
•	Встановлення часових інтервалів для перевірки статусів;
•	Визначення кольорів для різних станів замовлення;
•	Встановлення порогових значень для оцінки ефективності (80% та 50%).
ВИСНОВКИ

Протягом лабораторної роботи було побудовано діаграми прецедентів та діяльності для IoT пристрою індикації статусу замовлення (див. Додатки А-Б). На базі цих діаграм було реалізовано програмний код для ESP32 з RGB світлодіодом, який відображає статуси замовлень та показники ефективності системи (див. Додаток В).
 
ДОДАТОК А
UML ДІАГРАМА ПРЕЦЕДЕНТІВ
 
Рисунок А – Діаграма прецедентів для ІоТ клієнта

ДОДАТОК Б
UML ДІАГРАМИ ДІЯЛЬНОСТІ

Рисунок Б – Діаграма діяльності для ІоТ клієнта
 
ДОДАТОК В
ФРАГМЕНТИ ПРОГРАМНОГО КОДУ

sketch.ino:
1.	#include <WiFi.h>
2.	#include <HTTPClient.h>
3.	#include <ArduinoJson.h>

4.	#define RED_PIN 23
5.	#define GREEN_PIN 22
6.	#define BLUE_PIN 21

7.	const char* ssid = "Wokwi-GUEST";
8.	const char* password = "";

9.	const char* baseUrl = "http://bbdb-46-150-86-71.ngrok-free.app/api";
10.	const char* statusUrl = "http://bbdb-46-150-86-71.ngrok-free.app/api/iot/status";
11.	const char* statisticsUrl = "http://bbdb-46-150-86-71.ngrok-free.app/api/iot/statistics";

12.	void setColor(bool red, bool green, bool blue) {
13.	digitalWrite(RED_PIN, red ? LOW : HIGH);
14.	digitalWrite(GREEN_PIN, green ? LOW : HIGH);
15.	digitalWrite(BLUE_PIN, blue ? LOW : HIGH);
16.	}

17.	void setup_wifi() {
18.	Serial.println("Connecting to WiFi...");
19.	WiFi.begin(ssid, password);

20.	while (WiFi.status() != WL_CONNECTED) {
21.	delay(500);
22.	Serial.print(".");
23.	}

24.	Serial.println("\nWiFi connected");
25.	Serial.print("IP address: ");
26.	Serial.println(WiFi.localIP());
27.	}

28.	void calculateEfficiency(float successRate) {
29.	Serial.print("Processing success rate: ");
30.	Serial.print(successRate);
31.	Serial.println("%");
32.	if (successRate >= 80) {
33.	setColor(false, true, false);
34.	Serial.println("High efficiency - GREEN");
35.	} 
36.	else if (successRate >= 50) {
37.	setColor(true, true, false);
38.	Serial.println("Medium efficiency - YELLOW");
39.	}
40.	else {
41.	setColor(true, false, false);
42.	Serial.println("Low efficiency - RED");
43.	}
44.	}

45.	void checkOrderStatus() {
46.	if (WiFi.status() == WL_CONNECTED) {
47.	HTTPClient http;

48.	Serial.print("Checking order status at: ");
49.	Serial.println(statusUrl);

50.	http.begin(statusUrl);
51.	http.addHeader("Accept", "application/json");

52.	int httpCode = http.GET();
53.	Serial.print("Status HTTP Response code: ");
54.	Serial.println(httpCode);

55.	if (httpCode == HTTP_CODE_OK) {
56.	String response = http.getString();
57.	Serial.print("Status response: ");
58.	Serial.println(response);

59.	if (response.indexOf("\"status\":\"rejected\"") >= 0) {
60.	setColor(true, false, false);
61.	Serial.println("Order Status: REJECTED (RED)");
62.	} 
63.	else if (response.indexOf("\"status\":\"accepted\"") >= 0) {
64.	setColor(false, true, false);
65.	Serial.println("Order Status: ACCEPTED (GREEN)");
66.	}
67.	else if (response.indexOf("\"status\":\"processing\"") >= 0) {
68.	setColor(false, false, true);
69.	Serial.println("Order Status: PROCESSING (BLUE)");
70.	}
71.	else if (response.indexOf("\"status\":\"preparing\"") >= 0) {
72.	setColor(true, true, false);
73.	Serial.println("Order Status: PREPARING (YELLOW)");
74.	}
75.	else if (response.indexOf("\"status\":\"ready\"") >= 0) {
76.	setColor(true, true, true);
77.	Serial.println("Order Status: READY (WHITE)");
78.	}
79.	}
80.	http.end();
81.	Serial.println("--------------------");
82.	}
83.	}

84.	void checkStatistics() {
85.	if (WiFi.status() == WL_CONNECTED) {
86.	HTTPClient http;

87.	Serial.print("Checking statistics at: ");
88.	Serial.println(statisticsUrl);

89.	http.begin(statisticsUrl);
90.	http.addHeader("Accept", "application/json");

91.	int httpCode = http.GET();
92.	Serial.print("Statistics HTTP Response code: ");
93.	Serial.println(httpCode);

94.	if (httpCode == HTTP_CODE_OK) {
95.	String response = http.getString();
96.	Serial.print("Statistics response: ");
97.	Serial.println(response);

98.	DynamicJsonDocument doc(1024);
99.	DeserializationError error = deserializeJson(doc, response);

100.	if (!error) {
101.	float successRate = doc["successRate"];
102.	float avgProcessingTime = doc["averageProcessingTime"];

103.	calculateEfficiency(successRate);

104.	Serial.print("Average Processing Time: ");
105.	Serial.print(avgProcessingTime);
106.	Serial.println(" seconds");
107.	} else {
108.	Serial.print("JSON parsing failed: ");
109.	Serial.println(error.c_str());
110.	}
111.	}
112.	http.end();
113.	Serial.println("--------------------");
114.	}
115.	}

116.	void setup() {
117.	Serial.begin(115200);
118.	Serial.println("Starting setup...");

119.	pinMode(RED_PIN, OUTPUT);
120.	pinMode(GREEN_PIN, OUTPUT);
121.	pinMode(BLUE_PIN, OUTPUT);

122.	Serial.println("LED Test Sequence:");

123.	Serial.println("Testing RED");
124.	setColor(true, false, false);
125.	delay(1000);

126.	Serial.println("Testing GREEN");
127.	setColor(false, true, false);
128.	delay(1000);

129.	Serial.println("Testing BLUE");
130.	setColor(false, false, true);
131.	delay(1000);

132.	Serial.println("Testing OFF");
133.	setColor(false, false, false);

134.	Serial.println("LED test completed");

135.	setup_wifi();
136.	}
137.	void loop() {
138.	checkOrderStatus();
139.	delay(2500);
140.	checkStatistics();
141.	delay(2500);
142.	}

diagram.json:
1.	{
2.	  "version": 1,
3.	  "author": "Олександра Атаманова",
4.	  "editor": "wokwi",
5.	  "parts": [
6.	    {
7.	      "type": "board-esp32-devkit-c-v4",
8.	      "id": "esp",
9.	      "top": 0,
10.	      "left": 0,
11.	      "attrs": {}
12.	    },
13.	    {
14.	      "type": "wokwi-rgb-led",
15.	      "id": "rgb1",
16.	      "top": 100,
17.	      "left": 100,
18.	      "attrs": {
19.	        "common": "anode"
20.	      }
21.	    }
22.	  ],
23.	  "connections": [
24.	    [ "esp:23", "rgb1:R", "red", [ "v0" ] ],
25.	    [ "esp:22", "rgb1:G", "green", [ "v0" ] ],
26.	    [ "esp:21", "rgb1:B", "blue", [ "v0" ] ],
27.	    [ "esp:3V3", "rgb1:COM", "black", [ "v0" ] ],
28.	    [ "esp:TX", "$serialMonitor:RX", "", [] ],
29.	    [ "esp:RX", "$serialMonitor:TX", "", [] ]
30.	  ]
31.	}

Математична обробка даних для розрахунку ефективності системи замовлень:
1.	router.get('/statistics', async (req, res) => {
2.	    try {
3.	        const orders = await Order.find({ 
4.	            createdAt: { 
5.	                $gte: new Date(Date.now() - 24*60*60*1000) 
6.	            } 
7.	        });
8.	
9.	        let totalProcessingTime = 0;
10.	        let completedOrders = 0;
11.	
12.	        orders.forEach(order => {
13.	            if (order.status === 'completed' || order.status === 'ready') {
14.	                const processingTime = (order.updatedAt - order.createdAt) / 1000;
15.	                totalProcessingTime += processingTime;
16.	                completedOrders++;
17.	            }
18.	        });
19.	
20.	        const averageProcessingTime = completedOrders > 0 
21.	            ? totalProcessingTime / completedOrders 
22.	            : 0;
23.	
24.	        const successRate = (orders.length > 0)
25.	            ? (completedOrders / orders.length) * 100
26.	            : 0;
27.	
28.	        res.json({
29.	            totalOrders: orders.length,
30.	            completedOrders: completedOrders,
31.	            averageProcessingTime: averageProcessingTime,
32.	            successRate: successRate,
33.	            efficiency: (successRate > 80) ? "HIGH" : (successRate > 50 ? "MEDIUM" : "LOW")
34.	        });
35.	    } catch (error) {
36.	        res.status(500).json({ error: error.message });
37.	    }
38.	});

ДОДАТОК Г
ВІДЕО НА ЮТУБ

https://youtu.be/T_H3tnQvZfY

